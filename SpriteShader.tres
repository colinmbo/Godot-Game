[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeScalarConstant" id=2]
constant = 0.98

[sub_resource type="VisualShaderNodeColorOp" id=3]

[sub_resource type="VisualShaderNodeColorUniform" id=4]
uniform_name = "ColorUniform"

[sub_resource type="VisualShaderNodeExpression" id=5]
size = Vector2( 1910.81, 401.942 )
expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform vec4 ColorUniform : hint_color;
uniform sampler2D TextureUniform;



void vertex() {
// Expression:2
	mat4 n_out2p0;
	n_out2p0 = mat4(1.0);
	{
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
	}

// Output:0

}

void fragment() {
// ColorUniform:5
	vec3 n_out5p0 = ColorUniform.rgb;
	float n_out5p1 = ColorUniform.a;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ColorOp:4
	vec3 n_out4p0 = vec3(1.0) - (vec3(1.0) - n_out5p0) * (vec3(1.0) - n_out2p0);

// Scalar:3
	float n_out3p0 = 0.980000;

// Output:0
	ALBEDO = n_out4p0;
	ALPHA = n_out2p1;
	ALPHA_SCISSOR = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -477.95, -29.3325 )
flags/unshaded = true
nodes/vertex/2/node = SubResource( 5 )
nodes/vertex/2/position = Vector2( -1680, 160 )
nodes/vertex/2/size = Vector2( 1910.81, 401.942 )
nodes/vertex/2/input_ports = ""
nodes/vertex/2/output_ports = "0,3,output0;"
nodes/vertex/2/expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);"
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 0 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -660, 380 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -160, 760 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -120, 120 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -700, 60 )
nodes/fragment/connections = PoolIntArray( 2, 1, 0, 1, 3, 0, 0, 18, 5, 0, 4, 0, 2, 0, 4, 1, 4, 0, 0, 0 )
